str(alldata)
levelCat=c("no education", "some primary", "completed primary", "some secondary ordinary level", "completed secondary orginary level", "some secondary advanced level", "completed secondary advanced level", "some higher education" )
levelCat
alldata$educ1=factor(alldata$educ1,
levels = levelCat,
labels=levelCat,ordered=T)
str(alldata)
alldata$literacy[alldata$hh_c03==1] <- 1
alldata$literacy[alldata$hh_c03==2] <- 1
alldata$literacy[alldata$hh_c03==3] <- 1
alldata$literacy[alldata$hh_c03==4] <- 1
alldata$literacy[alldata$hh_c03==5] <- 0
str(alldata$literacy)
alldata$educ2[alldata$educ<4] <- 0
alldata$educ2[alldata$educ>=4] <-1
alldata$educ3[alldata$educ2==0] <- "Did not complete secondary"
alldata$educ3[alldata$educ2==1] <- "Completed secondary"
str(alldata)
table(alldata$gender.name)
mean(alldata$gender)
summary(alldata$educ)
table(alldata$educ1)
summary(alldata$literacy)
table(alldata$literacy)
summary(alldata$educ2)
table(alldata$educ3)
library(ggplot2)
indiv = alldata[alldata$indidy4==1,]
p <- ggplot(indiv, aes(gender.name, cons))
p + geom_boxplot() + labs(title="Are the mean consumption different between male headed households and female headed households?")
seMean = function(x) sd(x)/sqrt(length(x))
# Means by group
means=aggregate(list(mean=alldata$expmR),
list(educ=alldata$educ1),mean)
# se by group
sems=aggregate(list(seMean=alldata$expmR),
list(educ=alldata$educ1),seMean)
# a new data frame:
data=merge(means,sems)
# adding confidence interval limits:
data$lower=data$mean-2*data$seMean
data$upper=data$mean+2*data$seMean
indiv = alldata[alldata$indidy4==1,]
p <- ggplot(indiv, aes(educ1, cons))
p + geom_boxplot() + labs(title="Is mean consumption different between education level of head of household?")
library(ggplot2)
indiv = alldata[alldata$indidy4==1,]
p <- ggplot(indiv, aes(educ3, cons))
p + geom_boxplot() + labs(title="Are the mean consumption different households where the head has completed secondary level education?")
tapply(alldata$expmR, list(gender=alldata$gender,education=alldata$educ3), mean)
exp=aggregate(cbind(cons) ~ region, data=alldata, FUN=median)
ed=aggregate(cbind(educ2, gender) ~ region, data=alldata, FUN=mean)
merge2=merge(ed, exp)
str(merge2)
res <- cor(merge2[,c(2:4)],use='complete.obs')
round(res, 2)
library(car)
scatterplotMatrix(merge2[,c(2:4)],
main="Simple Scatterplot Matrix",smoother = F,reg.line = F)
length(merge2$region)==length(unique(merge2$region))
row.names(merge2)=merge2$region
str(merge2[,c(2:4)])
library(cluster)
cluster=daisy(merge2[,c(2:4)],metric = "euclidean",
stand=TRUE)
cluster1=hclust(cluster,method='complete')
plot(cluster1,cex=.8) #note: cex is a number indicating size of text and symbols in our plot
plot(cluster1,cex=.8)
rect.hclust(cluster1, k = 4, border = c('orange', 'blue', 'red', 'green'))
plot(cluster1,cex=.8)
rect.hclust(cluster1, k = 3, border = c('orange', 'blue', 'red'))
demsil4=silhouette(cutree(cluster1, k = 4), cluster)
clust4solution=data.frame(matrix(demsil4,ncol = 3,dimnames =dimnames(demsil4)))
row.names(clust4solution)=merge2$region
(bad4=clust4solution[clust4solution$sil_width<0,])
demsil3=silhouette(cutree(cluster1, k = 3), cluster)
clust3solution=data.frame(matrix(demsil3,ncol = 3,dimnames =dimnames(demsil3)))
row.names(clust3solution)=merge2$region
(bad3=clust3solution[clust3solution$sil_width<0,])
intersect(row.names(bad4), row.names(bad3))
cluster3=clust3solution
cluster3$region=row.names(clust3solution)
row.names(cluster3)=NULL
merge3=merge(merge2, cluster3)
str(merge3)
compressedMap= "https://github.com/ihsun-uw/PROJECT/raw/master/Shapefile/TZA_adm_shp.zip"
library(utils)
temp=tempfile()
download.file(compressedMap, temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
library(rgdal)
TZmap <- rgdal::readOGR("TZA_adm1.shp",stringsAsFactors=F)
names(TZmap)
str(TZmap$NAME_1)
TZmap$NAME_1
merge3$region.name[merge3$region==1] <-"Dodoma"
merge3$region.name[merge3$region==2] <-"Arusha"
merge3$region.name[merge3$region==3] <-"Kilimanjaro"
merge3$region.name[merge3$region==4] <-"Tanga"
merge3$region.name[merge3$region==5] <-"Morogoro"
merge3$region.name[merge3$region==6] <-"Pwani"
merge3$region.name[merge3$region==7] <-"Dar es Salaam"
merge3$region.name[merge3$region==8] <-"Lindi"
merge3$region.name[merge3$region==9] <-"Mtwara"
merge3$region.name[merge3$region==10] <-"Ruvuma"
merge3$region.name[merge3$region==11] <-"Iringa"
merge3$region.name[merge3$region==12] <-"Mbeya"
merge3$region.name[merge3$region==13] <-"Singida"
merge3$region.name[merge3$region==14] <-"Tabora"
merge3$region.name[merge3$region==15] <-"Rukwa"
merge3$region.name[merge3$region==16] <-"Kigoma"
merge3$region.name[merge3$region==17] <-"Shinyanga"
merge3$region.name[merge3$region==18] <-"Kagera"
merge3$region.name[merge3$region==19] <-"Mwanza"
merge3$region.name[merge3$region==20] <-"Mara"
merge3$region.name[merge3$region==21] <-"Manyara"
merge3$region.name[merge3$region==22] <-"Njombe"
merge3$region.name[merge3$region==23] <-"Katavi"
merge3$region.name[merge3$region==24] <-"Simiyu"
merge3$region.name[merge3$region==25] <-"Geita"
merge3$region.name[merge3$region==51] <-"Zanzibar North"
merge3$region.name[merge3$region==52] <-"Zanzibar South and Central"
merge3$region.name[merge3$region==53] <-"Zanzibar West"
merge3$region.name[merge3$region==54] <-"Pemba North"
merge3$region.name[merge3$region==55] <-"Pemba South"
TZregmap=merge(TZmap, merge3, by.x='NAME_1', by.y='region.name', all.x=F)
nrow(TZmap)
nrow(merge3)
library(RColorBrewer)
library(classInt)
varToPLot=TZregmap$cons
numberOfClasses = 8
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="per capita consumption"
shrinkLegend=0.5
title="Per capita consumption by region"
plot(TZmap,col='red',main=title)
plot(TZregmap, col = colorPallette,border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
varToPLot2=TZregmap$educ2
numberOfClasses = 8
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot2, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="proportion of head of households who completed a secondary level education"
shrinkLegend=0.5
title="Education of head of household by region"
plot(TZmap,col='red',main=title)
plot(TZregmap, col = colorPallette,border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
varToPLot3=TZregmap$gender
numberOfClasses = 8
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot3, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="proportion of female headed households"
shrinkLegend=0.5
title="Head of household gender by region"
plot(TZmap,col='red',main=title)
plot(TZregmap, col = colorPallette,border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
TZregmap$cluster=factor(TZregmap$cluster)
varToPlot4=TZregmap$cluster
numberOfClasses = length(levels(varToPlot4))
colorForScale='Set2'
colors = brewer.pal(numberOfClasses, colorForScale)
title="Cluster"
plot(TZmap,col='black',main=title)
plot(TZregmap, col = colors[varToPlot4],border='grey',add=T)
library(readxl)
temp = tempfile(fileext = ".xlsx")
dataURL <- "https://github.com/ihsun-uw/Assignment-1/raw/master/consumptionnps4.xlsx" # link to data
download.file(dataURL, destfile=temp, mode='wb')  # file will be downloaded temporarily
cons = read_excel(temp, sheet =1)
cons=as.data.frame(cons)
temp = tempfile(fileext = ".xlsx")
dataURL <- "https://github.com/ihsun-uw/Assignment-1/raw/master/Education.xlsx" # link to data
download.file(dataURL, destfile=temp, mode='wb')  # file will be downloaded temporarily
educ = read_excel(temp, sheet =1)
educ=as.data.frame(educ)
temp = tempfile(fileext = ".xlsx")
dataURL <- "https://github.com/ihsun-uw/Assignment-1/raw/master/individual.xlsx" # link to data
download.file(dataURL, destfile=temp, mode='wb')  # file will be downloaded temporarily
indiv = read_excel(temp, sheet =1)
indiv=as.data.frame(indiv)
cons=cons[,c("y4_hhid", "expmR", "adulteq", "region")]
educ=educ[,c("y4_hhid", "indidy4", "hh_c02", "hh_c03", "hh_c07")]
indiv=indiv[,c("y4_hhid", "indidy4", "hh_b02")]
educ=educ[educ$indidy4==1,]
indiv=indiv[indiv$indidy4==1,]
merge1=merge(cons, educ)
alldata=merge(merge1, indiv)
str(alldata)
alldata$cons=alldata$expmR/alldata$adulteq
summary(alldata$cons)
sd(alldata$cons,na.rm = T)
alldata$cons=alldata$expmR/alldata$adulteq/365
summary(alldata$cons)
library(readxl)
temp = tempfile(fileext = ".xlsx")
dataURL <- "https://github.com/ihsun-uw/Assignment-1/raw/master/consumptionnps4.xlsx" # link to data
download.file(dataURL, destfile=temp, mode='wb')  # file will be downloaded temporarily
cons = read_excel(temp, sheet =1)
cons=as.data.frame(cons)
temp = tempfile(fileext = ".xlsx")
dataURL <- "https://github.com/ihsun-uw/Assignment-1/raw/master/Education.xlsx" # link to data
download.file(dataURL, destfile=temp, mode='wb')  # file will be downloaded temporarily
educ = read_excel(temp, sheet =1)
educ=as.data.frame(educ)
temp = tempfile(fileext = ".xlsx")
dataURL <- "https://github.com/ihsun-uw/Assignment-1/raw/master/individual.xlsx" # link to data
download.file(dataURL, destfile=temp, mode='wb')  # file will be downloaded temporarily
indiv = read_excel(temp, sheet =1)
indiv=as.data.frame(indiv)
cons=cons[,c("y4_hhid", "expmR", "adulteq", "region")]
educ=educ[,c("y4_hhid", "indidy4", "hh_c02", "hh_c03", "hh_c07")]
indiv=indiv[,c("y4_hhid", "indidy4", "hh_b02")]
educ=educ[educ$indidy4==1,]
indiv=indiv[indiv$indidy4==1,]
merge1=merge(cons, educ)
alldata=merge(merge1, indiv)
str(alldata)
alldata$cons=alldata$expmR/alldata$adulteq/365
summary(alldata$cons)
data=alldata[is.finite(alldata$'cons'),]
var=alldata$'cons'
mnVar=mean(var,na.rm = T)
sdVar=sd(var,na.rm = T)
library(ggplot2)
base = ggplot(data, aes(x=var))
hist = base + geom_histogram(fill="green",
color='grey',
aes(y=..density..))
histAndNormal = hist + stat_function(fun=dnorm,
color="red",
args=list(mean=mnVar,sd=sdVar))
histAndNormal
mdVar=median(var)
histAndNormal + geom_vline(aes(xintercept = mnVar,colour="mean"),
show.legend  = TRUE) +
geom_vline(aes(xintercept = mdVar,colour="median"),
show.legend  = TRUE) +
scale_color_manual(name = "centrals",
values = c(median = "blue", mean = "red"))
library(car)
scatterplotMatrix(merge2[,c(2:4)],
main="Simple Scatterplot Matrix",smoother = F,reg.line = T)
library(readxl)
temp = tempfile(fileext = ".xlsx")
dataURL <- "https://github.com/ihsun-uw/Assignment-1/raw/master/consumptionnps4.xlsx" # link to data
download.file(dataURL, destfile=temp, mode='wb')  # file will be downloaded temporarily
cons = read_excel(temp, sheet =1)
cons=as.data.frame(cons)
temp = tempfile(fileext = ".xlsx")
dataURL <- "https://github.com/ihsun-uw/Assignment-1/raw/master/Education.xlsx" # link to data
download.file(dataURL, destfile=temp, mode='wb')  # file will be downloaded temporarily
educ = read_excel(temp, sheet =1)
educ=as.data.frame(educ)
temp = tempfile(fileext = ".xlsx")
dataURL <- "https://github.com/ihsun-uw/Assignment-1/raw/master/individual.xlsx" # link to data
download.file(dataURL, destfile=temp, mode='wb')  # file will be downloaded temporarily
linkRegions= 'https://github.com/efweavs1989/PUBPOL599B_DATA/blob/master/hh_sec_a.csv?raw=true'
region=read.csv(linkRegions)
i_link= 'https://github.com/efweavs1989/PUBPOL599B_DATA/raw/master/hh_sec_i.csv'
i_data= read.csv(i_link)
q1_link= 'https://github.com/efweavs1989/PUBPOL599B_DATA/raw/master/hh_sec_q1.csv'
q1_data= read.csv(q1_link)
names(region)
region=region[,c("y4_hhid","hh_a01_1", "hh_a01_2")]
names(i_data)
i_data=i_data[,c("y4_hhid","hh_i05","hh_i06","hh_i08","hh_i09","hh_i10")]
names(q1_data)
q1_data=q1_data[,c("y4_hhid","hh_q01_1","hh_q01_2","hh_q01_3","hh_q01_4")]
i_reg=merge(region,i_data)
projectData=merge(i_reg,q1_data)
str(projectData)
names(projectData)=gsub("y4_hhid", "Household_ID", names(projectData))
names(projectData)=gsub("hh_a01_1", "Region_Code", names(projectData))
names(projectData)=gsub("hh_a01_2", "Region_Name", names(projectData))
names(projectData)=gsub("hh_i05", "Value_of_Repairs", names(projectData))
names(projectData)=gsub("hh_i06", "Value_of_Improvements", names(projectData))
names(projectData)=gsub("hh_i08", "Wall_Material", names(projectData))
names(projectData)=gsub("hh_i09", "Roof_Material", names(projectData))
names(projectData)=gsub("hh_i10", "Floor_Material", names(projectData))
names(projectData)=gsub("hh_q01_1", "MPesa_Use", names(projectData))
names(projectData)=gsub("hh_q01_2", "Ezy_Pesa_Use", names(projectData))
names(projectData)=gsub("hh_q01_3", "Airtel_Use", names(projectData))
names(projectData)=gsub("hh_q01_4", "Tigo_Pesa_Use", names(projectData))
names(projectData)
(mean_variables=aggregate(cbind(Value_of_Repairs, Value_of_Improvements, MPesa_Use, Ezy_Pesa_Use, Airtel_Use, Tigo_Pesa_Use) ~ Region_Code, data=projectData, FUN=mean))
getMode=function(aColumn){
freqTable=table(aColumn)
maxFrequency=max(freqTable)
names(freqTable[freqTable==maxFrequency])[1]
}
(mode_variables=aggregate(cbind(Wall_Material, Roof_Material, Floor_Material) ~ Region_Code, data=projectData, FUN=getMode))
projectData=merge(mean_variables,mode_variables)
projectData$Region_Code=gsub(51, 26, projectData$Region_Code)
projectData$Region_Code=gsub(52, 27, projectData$Region_Code)
projectData$Region_Code=gsub(53, 28, projectData$Region_Code)
projectData$Region_Code=gsub(54, 29, projectData$Region_Code)
projectData$Region_Code=gsub(55, 30, projectData$Region_Code)
projectData$Region_Code
projectData$Region_Code=as.numeric(projectData$Region_Code)
projectData$Region_Code
sd(mean_variables$Value_of_Improvements,na.rm = T)
library(moments)
install.packages("moments")
#get data
faostat=read.csv("https://github.com/howlem/projectData/raw/master/Production_Crops_E_All_Data.csv",stringsAsFactors = F)
#check that it is a data frame
is.data.frame(faostat)
#install libraries
library(DescTools)
library(ggplot2)
library(moments)
library(stringr)
library(scales)
library(car)
library(utils)
library(rgdal)
library(RColorBrewer)
library(classInt)
library(cluster)
#review data called
head(faostat)
str(faostat)
names(faostat)
##YIELD##
#just keep yield data
yield_1=faostat[faostat$'Element'!='Production',]
yield=yield_1[yield_1$'Element'!='Area harvested',]
head(yield)
#aggregate by country
yield=aggregate(yield$'Y2016',by=list(yield$'Area'),sum)
names(yield)=c('country','TotYield2016')
yield
str(yield)
##PRODUCTION##
#just keep production data
prod_1=faostat[faostat$'Element'!='Yield',]
prod=prod_1[prod_1$'Element'!='Area harvested',]
head(prod)
#aggregate by country
prod=aggregate(prod$'Y2016',by=list(prod$'Area'),sum)
names(prod)=c('country','TotProd2016')
prod
##AREA HARVESTED##
#just keep area harvested data
area_harv_1=faostat[faostat$'Element'!='Yield',]
area_harv=area_harv_1[area_harv_1$'Element'!='Production',]
head(area_harv)
#aggregate by country
area_harv=aggregate(area_harv$'Y2016',by=list(area_harv$'Area'),sum)
names(area_harv)=c('country','TotAreaHarv2016')
area_harv
#check data types
str(yield)
#centrality
summary(yield$'TotYield2016')
#dispersion
sd(yield$'TotYield2016',na.rm=T)
#coefficient of variation
sd(yield$'TotYield2016',na.rm=T)/mean(yield$'TotYield2016',na.rm=T)
#skewness
skewness(yield$'TotYield2016',na.rm=T)
#kurtosis
kurtosis(yield$'TotYield2016',na.rm=T)
Kurt(yield$'TotYield2016',na.rm=T)
##histogram
#keep non missing
data=yield[is.finite(yield$'TotYield2016'),]
#making numeric
as.numeric(data$'TotYield2016')
#histogram
hist(data$'TotYield2016')
#histogram of log
hist(log(data$'TotYield2016'))
#saving mean and sd
mnVar=mean(data$TotYield2016,na.rm=T)
sdVar=sd(data$TotYield2016,na.rm=T)
#outliers
summary(yield$'TotYield2016')
#boxplot
(bp=boxplot(yield$'TotYield2016',horizontal=T))
#boxplot of log
(bp_log=boxplot(log(yield$'TotYield2016')))
#show values of both boxplots
bp$stats
bp_log$stats
#show number of outliers
length(bp$out)
length(bp_log$out)
#merge yield, production, and area harvested data into one dataset
combinedYP=merge(yield,prod)
combinedYPAH=merge(combinedYP,area_harv)
head(combinedYPAH)
#correlation
res<-cor(combinedYPAH[,c(2:4)],use='complete.obs')
round(res,2)
#correlation of log
res_log<-cor(log(combinedYPAH[,c(2:4)]),use='complete.obs')
round(res_log,2)
#scatterplot
scatterplotMatrix(combinedYPAH[,c(2:4)],
main="Simple Scatterplot Matrix")
#scatterplot of log
scatterplotMatrix(log(combinedYPAH[,c(2:4)]),
main="Simple Scatterplot Matrix")
#non-parametric correlation
cor(combinedYPAH[,c(2:4)],use='complete.obs',method='spearman')
##MAP DATA##
#get zip file from github
compressedMap="https://github.com/howlem/projectData/blob/master/worldMap/worldMap.shp?raw=true"
#unzip the file
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
#select the map (shp file) needed
thefile=file.path('worldMap','worldMap.shp')
worldMap <- rgdal::readOGR(thefile,stringsAsFactors=F) # use the names
#check it out
head(worldMap)
#only keep African countries
worldMap=worldMap[worldMap$REGION==2,]
#see what variables are present
names(worldMap)
#rename "NAME" column to "country"" so can merge
names(worldMap)[names(worldMap)=='NAME'] <- 'country'
#merge the two datasets into one, by country
YPAHforMap <- merge(worldMap,combinedYPAH,
by=c("country"))
#see what happened
head(YPAHforMap)
#identify variable to plot
varToPlot=YPAHforMap$TotYield2016
#plot yield data on map of Africa
numberOfClasses = 8
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="Total Yield of all crops in 2016"
shrinkLegend=0.5
title="Total 2016 Yield by Country in Africa"
plot(worldMap,col='gray',main=title)
plot(YPAHforMap, col=colorPallette, border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
#identify variable to plot
varToPlot=YPAHforMap$TotProd2016
#plot production data on map of Africa
numberOfClasses = 8
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="Total Production of all crops in 2016"
shrinkLegend=0.5
title="Total 2016 Production by Country in Africa"
plot(worldMap,col='gray',main=title)
plot(YPAHforMap, col=colorPallette, border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
#identify variable to plot
varToPlot=YPAHforMap$TotAreaHarv2016
#plot area harvested data on map of Africa
numberOfClasses = 8
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="Total Area Harvested of all crops in 2016"
shrinkLegend=0.5
title="Total 2016 Area Harvested by Country in Africa"
plot(worldMap,col='gray',main=title)
plot(YPAHforMap, col=colorPallette, border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
